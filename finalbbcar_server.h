/*
 * You can write copyrights rules here. These rules will be copied into the outputs.
 */

/*
 * Generated by erpcgen 1.10.0 on Tue May 30 16:48:11 2023.
 *
 * AUTOGENERATED - DO NOT EDIT
 */


#if !defined(_finalbbcar_server_h_)
#define _finalbbcar_server_h_

#ifdef __cplusplus
#include "erpc_server.hpp"
#include "erpc_codec.hpp"
extern "C"
{
#include "finalbbcar.h"
#include <stdint.h>
#include <stdbool.h>
}

#if 11000 != ERPC_VERSION_NUMBER
#error "The generated shim code version is different to the rest of eRPC code."
#endif


/*!
 * @brief Service subclass for bbcarService.
 */
class bbcarService_service : public erpc::Service
{
public:
    bbcarService_service() : Service(kbbcarService_service_id) {}

    /*! @brief Call the correct server shim based on method unique ID. */
    virtual erpc_status_t handleInvocation(uint32_t methodId, uint32_t sequence, erpc::Codec * codec, erpc::MessageBufferFactory *messageFactory);

private:
    /*! @brief Server shim for bbcar_start of bbcarService interface. */
    erpc_status_t bbcar_start_shim(erpc::Codec * codec, erpc::MessageBufferFactory *messageFactory, uint32_t sequence);

    /*! @brief Server shim for bbcar_speed of bbcarService interface. */
    erpc_status_t bbcar_speed_shim(erpc::Codec * codec, erpc::MessageBufferFactory *messageFactory, uint32_t sequence);

    /*! @brief Server shim for bbcar_distance of bbcarService interface. */
    erpc_status_t bbcar_distance_shim(erpc::Codec * codec, erpc::MessageBufferFactory *messageFactory, uint32_t sequence);
};

extern "C" {
#else
#include "finalbbcar.h"
#endif // __cplusplus

typedef void * erpc_service_t;

/*! @brief Return bbcarService_service service object. */
erpc_service_t create_bbcarService_service(void);

/*! @brief Destroy bbcarService_service service object. */
void destroy_bbcarService_service(erpc_service_t service);

#ifdef __cplusplus
}
#endif // __cplusplus

#endif // _finalbbcar_server_h_
